-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mult_hw_mult_hw_Pipeline_readA is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    A_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_V_ce0 : OUT STD_LOGIC;
    A_V_we0 : OUT STD_LOGIC;
    A_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_V_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_V_1_ce0 : OUT STD_LOGIC;
    A_V_1_we0 : OUT STD_LOGIC;
    A_V_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_V_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_V_2_ce0 : OUT STD_LOGIC;
    A_V_2_we0 : OUT STD_LOGIC;
    A_V_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_V_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_V_3_ce0 : OUT STD_LOGIC;
    A_V_3_we0 : OUT STD_LOGIC;
    A_V_3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_V_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_V_4_ce0 : OUT STD_LOGIC;
    A_V_4_we0 : OUT STD_LOGIC;
    A_V_4_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_V_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_V_5_ce0 : OUT STD_LOGIC;
    A_V_5_we0 : OUT STD_LOGIC;
    A_V_5_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_V_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_V_6_ce0 : OUT STD_LOGIC;
    A_V_6_we0 : OUT STD_LOGIC;
    A_V_6_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_V_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_V_7_ce0 : OUT STD_LOGIC;
    A_V_7_we0 : OUT STD_LOGIC;
    A_V_7_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_V_8_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_V_8_ce0 : OUT STD_LOGIC;
    A_V_8_we0 : OUT STD_LOGIC;
    A_V_8_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_V_9_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_V_9_ce0 : OUT STD_LOGIC;
    A_V_9_we0 : OUT STD_LOGIC;
    A_V_9_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_V_10_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_V_10_ce0 : OUT STD_LOGIC;
    A_V_10_we0 : OUT STD_LOGIC;
    A_V_10_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_V_11_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_V_11_ce0 : OUT STD_LOGIC;
    A_V_11_we0 : OUT STD_LOGIC;
    A_V_11_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_V_12_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_V_12_ce0 : OUT STD_LOGIC;
    A_V_12_we0 : OUT STD_LOGIC;
    A_V_12_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_V_13_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_V_13_ce0 : OUT STD_LOGIC;
    A_V_13_we0 : OUT STD_LOGIC;
    A_V_13_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_V_14_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_V_14_ce0 : OUT STD_LOGIC;
    A_V_14_we0 : OUT STD_LOGIC;
    A_V_14_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_V_15_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_V_15_ce0 : OUT STD_LOGIC;
    A_V_15_we0 : OUT STD_LOGIC;
    A_V_15_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in1 : IN STD_LOGIC_VECTOR (63 downto 0);
    trunc_ln : IN STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of mult_hw_mult_hw_Pipeline_readA is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln25_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem0_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem0_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal gmem0_addr_reg_626 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln31_2_fu_448_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln31_2_reg_632 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln31_2_reg_632_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln31_2_reg_632_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln31_2_reg_632_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln31_2_reg_632_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln31_2_reg_632_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln31_2_reg_632_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln31_2_reg_632_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln31_2_reg_632_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_addr_read_reg_637 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln31_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln31_fu_438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_fu_585_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_489_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal itr_fu_148 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln25_fu_408_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_allocacmp_itr_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln31_1_fu_509_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln31_3_fu_565_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal itr_cast_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln31_1_fu_422_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln31_4_fu_428_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln31_2_fu_418_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln27_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_477_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_fu_471_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln31_fu_497_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_501_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln27_fu_485_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln31_fu_513_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln_fu_519_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln31_1_fu_549_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_1_fu_556_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln31_fu_560_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mult_hw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component mult_hw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    i_fu_144 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter9 = ap_const_logic_1)) then 
                    i_fu_144 <= i_2_fu_489_p3;
                end if;
            end if; 
        end if;
    end process;

    itr_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln25_fu_402_p2 = ap_const_lv1_0))) then 
                    itr_fu_148 <= add_ln25_fu_408_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    itr_fu_148 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    j_fu_140 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter9 = ap_const_logic_1)) then 
                    j_fu_140 <= j_2_fu_585_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln25_fu_402_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln31_2_reg_632 <= add_ln31_2_fu_448_p2;
                gmem0_addr_reg_626 <= sext_ln31_fu_438_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln31_2_reg_632_pp0_iter1_reg <= add_ln31_2_reg_632;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln31_2_reg_632_pp0_iter2_reg <= add_ln31_2_reg_632_pp0_iter1_reg;
                add_ln31_2_reg_632_pp0_iter3_reg <= add_ln31_2_reg_632_pp0_iter2_reg;
                add_ln31_2_reg_632_pp0_iter4_reg <= add_ln31_2_reg_632_pp0_iter3_reg;
                add_ln31_2_reg_632_pp0_iter5_reg <= add_ln31_2_reg_632_pp0_iter4_reg;
                add_ln31_2_reg_632_pp0_iter6_reg <= add_ln31_2_reg_632_pp0_iter5_reg;
                add_ln31_2_reg_632_pp0_iter7_reg <= add_ln31_2_reg_632_pp0_iter6_reg;
                add_ln31_2_reg_632_pp0_iter8_reg <= add_ln31_2_reg_632_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                gmem0_addr_read_reg_637 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    A_V_10_address0 <= zext_ln31_fu_529_p1(7 - 1 downto 0);

    A_V_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_10_ce0 <= ap_const_logic_1;
        else 
            A_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_10_d0 <= trunc_ln31_3_fu_565_p1;

    A_V_10_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln31_1_fu_509_p1)
    begin
        if (((trunc_ln31_1_fu_509_p1 = ap_const_lv4_A) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_10_we0 <= ap_const_logic_1;
        else 
            A_V_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_11_address0 <= zext_ln31_fu_529_p1(7 - 1 downto 0);

    A_V_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_11_ce0 <= ap_const_logic_1;
        else 
            A_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_11_d0 <= trunc_ln31_3_fu_565_p1;

    A_V_11_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln31_1_fu_509_p1)
    begin
        if (((trunc_ln31_1_fu_509_p1 = ap_const_lv4_B) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_11_we0 <= ap_const_logic_1;
        else 
            A_V_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_12_address0 <= zext_ln31_fu_529_p1(7 - 1 downto 0);

    A_V_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_12_ce0 <= ap_const_logic_1;
        else 
            A_V_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_12_d0 <= trunc_ln31_3_fu_565_p1;

    A_V_12_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln31_1_fu_509_p1)
    begin
        if (((trunc_ln31_1_fu_509_p1 = ap_const_lv4_C) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_12_we0 <= ap_const_logic_1;
        else 
            A_V_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_13_address0 <= zext_ln31_fu_529_p1(7 - 1 downto 0);

    A_V_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_13_ce0 <= ap_const_logic_1;
        else 
            A_V_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_13_d0 <= trunc_ln31_3_fu_565_p1;

    A_V_13_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln31_1_fu_509_p1)
    begin
        if (((trunc_ln31_1_fu_509_p1 = ap_const_lv4_D) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_13_we0 <= ap_const_logic_1;
        else 
            A_V_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_14_address0 <= zext_ln31_fu_529_p1(7 - 1 downto 0);

    A_V_14_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_14_ce0 <= ap_const_logic_1;
        else 
            A_V_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_14_d0 <= trunc_ln31_3_fu_565_p1;

    A_V_14_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln31_1_fu_509_p1)
    begin
        if (((trunc_ln31_1_fu_509_p1 = ap_const_lv4_E) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_14_we0 <= ap_const_logic_1;
        else 
            A_V_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_15_address0 <= zext_ln31_fu_529_p1(7 - 1 downto 0);

    A_V_15_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_15_ce0 <= ap_const_logic_1;
        else 
            A_V_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_15_d0 <= trunc_ln31_3_fu_565_p1;

    A_V_15_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln31_1_fu_509_p1)
    begin
        if (((trunc_ln31_1_fu_509_p1 = ap_const_lv4_F) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_15_we0 <= ap_const_logic_1;
        else 
            A_V_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_1_address0 <= zext_ln31_fu_529_p1(7 - 1 downto 0);

    A_V_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_1_ce0 <= ap_const_logic_1;
        else 
            A_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_1_d0 <= trunc_ln31_3_fu_565_p1;

    A_V_1_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln31_1_fu_509_p1)
    begin
        if (((trunc_ln31_1_fu_509_p1 = ap_const_lv4_1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_1_we0 <= ap_const_logic_1;
        else 
            A_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_2_address0 <= zext_ln31_fu_529_p1(7 - 1 downto 0);

    A_V_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_2_ce0 <= ap_const_logic_1;
        else 
            A_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_2_d0 <= trunc_ln31_3_fu_565_p1;

    A_V_2_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln31_1_fu_509_p1)
    begin
        if (((trunc_ln31_1_fu_509_p1 = ap_const_lv4_2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_2_we0 <= ap_const_logic_1;
        else 
            A_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_3_address0 <= zext_ln31_fu_529_p1(7 - 1 downto 0);

    A_V_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_3_ce0 <= ap_const_logic_1;
        else 
            A_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_3_d0 <= trunc_ln31_3_fu_565_p1;

    A_V_3_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln31_1_fu_509_p1)
    begin
        if (((trunc_ln31_1_fu_509_p1 = ap_const_lv4_3) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_3_we0 <= ap_const_logic_1;
        else 
            A_V_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_4_address0 <= zext_ln31_fu_529_p1(7 - 1 downto 0);

    A_V_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_4_ce0 <= ap_const_logic_1;
        else 
            A_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_4_d0 <= trunc_ln31_3_fu_565_p1;

    A_V_4_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln31_1_fu_509_p1)
    begin
        if (((trunc_ln31_1_fu_509_p1 = ap_const_lv4_4) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_4_we0 <= ap_const_logic_1;
        else 
            A_V_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_5_address0 <= zext_ln31_fu_529_p1(7 - 1 downto 0);

    A_V_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_5_ce0 <= ap_const_logic_1;
        else 
            A_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_5_d0 <= trunc_ln31_3_fu_565_p1;

    A_V_5_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln31_1_fu_509_p1)
    begin
        if (((trunc_ln31_1_fu_509_p1 = ap_const_lv4_5) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_5_we0 <= ap_const_logic_1;
        else 
            A_V_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_6_address0 <= zext_ln31_fu_529_p1(7 - 1 downto 0);

    A_V_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_6_ce0 <= ap_const_logic_1;
        else 
            A_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_6_d0 <= trunc_ln31_3_fu_565_p1;

    A_V_6_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln31_1_fu_509_p1)
    begin
        if (((trunc_ln31_1_fu_509_p1 = ap_const_lv4_6) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_6_we0 <= ap_const_logic_1;
        else 
            A_V_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_7_address0 <= zext_ln31_fu_529_p1(7 - 1 downto 0);

    A_V_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_7_ce0 <= ap_const_logic_1;
        else 
            A_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_7_d0 <= trunc_ln31_3_fu_565_p1;

    A_V_7_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln31_1_fu_509_p1)
    begin
        if (((trunc_ln31_1_fu_509_p1 = ap_const_lv4_7) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_7_we0 <= ap_const_logic_1;
        else 
            A_V_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_8_address0 <= zext_ln31_fu_529_p1(7 - 1 downto 0);

    A_V_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_8_ce0 <= ap_const_logic_1;
        else 
            A_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_8_d0 <= trunc_ln31_3_fu_565_p1;

    A_V_8_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln31_1_fu_509_p1)
    begin
        if (((trunc_ln31_1_fu_509_p1 = ap_const_lv4_8) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_8_we0 <= ap_const_logic_1;
        else 
            A_V_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_9_address0 <= zext_ln31_fu_529_p1(7 - 1 downto 0);

    A_V_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_9_ce0 <= ap_const_logic_1;
        else 
            A_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_9_d0 <= trunc_ln31_3_fu_565_p1;

    A_V_9_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln31_1_fu_509_p1)
    begin
        if (((trunc_ln31_1_fu_509_p1 = ap_const_lv4_9) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_9_we0 <= ap_const_logic_1;
        else 
            A_V_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_address0 <= zext_ln31_fu_529_p1(7 - 1 downto 0);

    A_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_ce0 <= ap_const_logic_1;
        else 
            A_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_V_d0 <= trunc_ln31_3_fu_565_p1;

    A_V_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln31_1_fu_509_p1)
    begin
        if (((trunc_ln31_1_fu_509_p1 = ap_const_lv4_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_we0 <= ap_const_logic_1;
        else 
            A_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln25_fu_408_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_itr_1) + unsigned(ap_const_lv12_1));
    add_ln29_fu_471_p2 <= std_logic_vector(unsigned(i_fu_144) + unsigned(ap_const_lv32_1));
    add_ln31_1_fu_422_p2 <= std_logic_vector(unsigned(itr_cast_fu_414_p1) + unsigned(in1));
    add_ln31_2_fu_448_p2 <= std_logic_vector(unsigned(trunc_ln31_2_fu_418_p1) + unsigned(trunc_ln));
    add_ln31_fu_513_p2 <= std_logic_vector(unsigned(shl_ln_fu_501_p3) + unsigned(trunc_ln27_fu_485_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, m_axi_gmem0_ARREADY, m_axi_gmem0_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((m_axi_gmem0_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, m_axi_gmem0_ARREADY, m_axi_gmem0_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((m_axi_gmem0_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter8_assign_proc : process(m_axi_gmem0_RVALID)
    begin
                ap_block_state9_pp0_stage0_iter8 <= (m_axi_gmem0_RVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln25_fu_402_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln25_fu_402_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_itr_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, itr_fu_148)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_itr_1 <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_itr_1 <= itr_fu_148;
        end if; 
    end process;


    gmem0_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_gmem0_ARREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem0_blk_n_AR <= m_axi_gmem0_ARREADY;
        else 
            gmem0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter8, m_axi_gmem0_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem0_blk_n_R <= m_axi_gmem0_RVALID;
        else 
            gmem0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    i_2_fu_489_p3 <= 
        add_ln29_fu_471_p2 when (icmp_ln27_fu_465_p2(0) = '1') else 
        i_fu_144;
    icmp_ln25_fu_402_p2 <= "1" when (ap_sig_allocacmp_itr_1 = ap_const_lv12_800) else "0";
    icmp_ln27_fu_465_p2 <= "1" when (j_fu_140 = ap_const_lv32_40) else "0";
    itr_cast_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_itr_1),64));
    j_1_fu_477_p3 <= 
        ap_const_lv32_0 when (icmp_ln27_fu_465_p2(0) = '1') else 
        j_fu_140;
    j_2_fu_585_p2 <= std_logic_vector(unsigned(j_1_fu_477_p3) + unsigned(ap_const_lv32_1));
    lshr_ln31_fu_560_p2 <= std_logic_vector(shift_right(unsigned(gmem0_addr_read_reg_637),to_integer(unsigned('0' & zext_ln31_1_fu_556_p1(31-1 downto 0)))));
    lshr_ln_fu_519_p4 <= add_ln31_fu_513_p2(10 downto 4);
    m_axi_gmem0_ARADDR <= gmem0_addr_reg_626;
    m_axi_gmem0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem0_ARID <= ap_const_lv1_0;
    m_axi_gmem0_ARLEN <= ap_const_lv32_1;
    m_axi_gmem0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem0_ARUSER <= ap_const_lv1_0;

    m_axi_gmem0_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem0_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_BREADY <= ap_const_logic_0;

    m_axi_gmem0_RREADY_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_WDATA <= ap_const_lv32_0;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv4_0;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_WVALID <= ap_const_logic_0;
        sext_ln31_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln31_4_fu_428_p4),64));

    shl_ln31_1_fu_549_p3 <= (add_ln31_2_reg_632_pp0_iter8_reg & ap_const_lv3_0);
    shl_ln_fu_501_p3 <= (trunc_ln31_fu_497_p1 & ap_const_lv6_0);
    trunc_ln27_fu_485_p1 <= j_1_fu_477_p3(11 - 1 downto 0);
    trunc_ln31_1_fu_509_p1 <= j_1_fu_477_p3(4 - 1 downto 0);
    trunc_ln31_2_fu_418_p1 <= ap_sig_allocacmp_itr_1(2 - 1 downto 0);
    trunc_ln31_3_fu_565_p1 <= lshr_ln31_fu_560_p2(8 - 1 downto 0);
    trunc_ln31_4_fu_428_p4 <= add_ln31_1_fu_422_p2(63 downto 2);
    trunc_ln31_fu_497_p1 <= i_2_fu_489_p3(5 - 1 downto 0);
    zext_ln31_1_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln31_1_fu_549_p3),32));
    zext_ln31_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_519_p4),64));
end behav;
