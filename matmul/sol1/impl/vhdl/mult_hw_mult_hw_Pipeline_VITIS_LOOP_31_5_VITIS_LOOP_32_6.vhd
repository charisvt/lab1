-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mult_hw_mult_hw_Pipeline_VITIS_LOOP_31_5_VITIS_LOOP_32_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    A_V_ce0 : OUT STD_LOGIC;
    A_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    A_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    A_V_ce1 : OUT STD_LOGIC;
    A_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    A_V_address2 : OUT STD_LOGIC_VECTOR (4 downto 0);
    A_V_ce2 : OUT STD_LOGIC;
    A_V_q2 : IN STD_LOGIC_VECTOR (7 downto 0);
    A_V_address3 : OUT STD_LOGIC_VECTOR (4 downto 0);
    A_V_ce3 : OUT STD_LOGIC;
    A_V_q3 : IN STD_LOGIC_VECTOR (7 downto 0);
    B_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_V_ce0 : OUT STD_LOGIC;
    B_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    B_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_V_ce1 : OUT STD_LOGIC;
    B_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    B_V_address2 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_V_ce2 : OUT STD_LOGIC;
    B_V_q2 : IN STD_LOGIC_VECTOR (7 downto 0);
    B_V_address3 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_V_ce3 : OUT STD_LOGIC;
    B_V_q3 : IN STD_LOGIC_VECTOR (7 downto 0);
    C_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    C_V_ce0 : OUT STD_LOGIC;
    C_V_we0 : OUT STD_LOGIC;
    C_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of mult_hw_mult_hw_Pipeline_VITIS_LOOP_31_5_VITIS_LOOP_32_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln31_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln37_fu_369_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln37_reg_546 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln37_reg_546_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln37_reg_546_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln37_reg_546_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1494_1_fu_420_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1494_1_reg_566 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1494_1_reg_566_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1494_2_fu_430_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1494_2_reg_571 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1494_2_reg_571_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln31_fu_289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln31_2_fu_300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_4_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_6_fu_322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_2_cast4_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln186_1_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln186_3_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln186_5_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_58 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln32_fu_375_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_62 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln31_1_fu_261_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten26_fu_66 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_fu_220_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten26_load : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_202_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln32_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln31_1_fu_243_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_21_fu_249_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln31_fu_269_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_mid1_fu_253_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_206_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln31_2_fu_281_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln31_fu_294_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln31_1_fu_305_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln31_2_fu_316_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln31_fu_235_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln35_fu_336_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln186_3_cast_fu_347_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln186_fu_360_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_cast3_fu_332_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid3_fu_273_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1494_1_fu_420_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_1_fu_420_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_2_fu_430_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_2_fu_430_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_463_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_472_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln840_2_fu_449_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln840_1_fu_446_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_463_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_463_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_463_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_472_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_472_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_472_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_463_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_463_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_463_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_472_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_472_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_472_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1494_1_fu_420_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1494_1_fu_420_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1494_2_fu_430_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1494_2_fu_430_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component mult_hw_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mult_hw_mac_muladd_8ns_8ns_16ns_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component mult_hw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_8ns_8ns_16_1_1_U9 : component mult_hw_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1494_1_fu_420_p0,
        din1 => mul_ln1494_1_fu_420_p1,
        dout => mul_ln1494_1_fu_420_p2);

    mul_8ns_8ns_16_1_1_U10 : component mult_hw_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1494_2_fu_430_p0,
        din1 => mul_ln1494_2_fu_430_p1,
        dout => mul_ln1494_2_fu_430_p2);

    mac_muladd_8ns_8ns_16ns_17_4_1_U11 : component mult_hw_mac_muladd_8ns_8ns_16ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_463_p0,
        din1 => grp_fu_463_p1,
        din2 => grp_fu_463_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_463_p3);

    mac_muladd_8ns_8ns_16ns_17_4_1_U12 : component mult_hw_mac_muladd_8ns_8ns_16ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_472_p0,
        din1 => grp_fu_472_p1,
        din2 => grp_fu_472_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_472_p3);

    flow_control_loop_pipe_sequential_init_U : component mult_hw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    i_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln31_fu_214_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_62 <= select_ln31_1_fu_261_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_62 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten26_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln31_fu_214_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten26_fu_66 <= add_ln31_fu_220_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten26_fu_66 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln31_fu_214_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_58 <= add_ln32_fu_375_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_58 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_214_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln37_reg_546 <= add_ln37_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln37_reg_546_pp0_iter1_reg <= add_ln37_reg_546;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                mul_ln1494_1_reg_566 <= mul_ln1494_1_fu_420_p2;
                mul_ln1494_2_reg_571 <= mul_ln1494_2_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln37_reg_546_pp0_iter2_reg <= add_ln37_reg_546_pp0_iter1_reg;
                add_ln37_reg_546_pp0_iter3_reg <= add_ln37_reg_546_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                mul_ln1494_1_reg_566_pp0_iter2_reg <= mul_ln1494_1_reg_566;
                mul_ln1494_2_reg_571_pp0_iter2_reg <= mul_ln1494_2_reg_571;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    A_V_address0 <= zext_ln31_6_fu_322_p1(5 - 1 downto 0);
    A_V_address1 <= zext_ln31_4_fu_311_p1(5 - 1 downto 0);
    A_V_address2 <= zext_ln31_2_fu_300_p1(5 - 1 downto 0);
    A_V_address3 <= zext_ln31_fu_289_p1(5 - 1 downto 0);

    A_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_V_ce0 <= ap_const_logic_1;
        else 
            A_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_V_ce1 <= ap_const_logic_1;
        else 
            A_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_V_ce2 <= ap_const_logic_1;
        else 
            A_V_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    A_V_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_V_ce3 <= ap_const_logic_1;
        else 
            A_V_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    B_V_address0 <= zext_ln186_5_fu_364_p1(6 - 1 downto 0);
    B_V_address1 <= zext_ln186_3_fu_355_p1(6 - 1 downto 0);
    B_V_address2 <= zext_ln186_1_fu_342_p1(6 - 1 downto 0);
    B_V_address3 <= j_2_cast4_fu_327_p1(6 - 1 downto 0);

    B_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_V_ce0 <= ap_const_logic_1;
        else 
            B_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_V_ce1 <= ap_const_logic_1;
        else 
            B_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_V_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_V_ce2 <= ap_const_logic_1;
        else 
            B_V_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    B_V_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_V_ce3 <= ap_const_logic_1;
        else 
            B_V_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    C_V_address0 <= zext_ln37_fu_459_p1(7 - 1 downto 0);

    C_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            C_V_ce0 <= ap_const_logic_1;
        else 
            C_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_V_d0 <= std_logic_vector(unsigned(zext_ln840_2_fu_449_p1) + unsigned(zext_ln840_1_fu_446_p1));

    C_V_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            C_V_we0 <= ap_const_logic_1;
        else 
            C_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln31_1_fu_243_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv4_1));
    add_ln31_fu_220_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten26_load) + unsigned(ap_const_lv8_1));
    add_ln32_fu_375_p2 <= std_logic_vector(unsigned(select_ln31_fu_235_p3) + unsigned(ap_const_lv5_1));
    add_ln37_fu_369_p2 <= std_logic_vector(unsigned(j_2_cast3_fu_332_p1) + unsigned(p_mid3_fu_273_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln31_fu_214_p2)
    begin
        if (((icmp_ln31_fu_214_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_62)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_62;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten26_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten26_fu_66)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten26_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten26_load <= indvar_flatten26_fu_66;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_58, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_58;
        end if; 
    end process;

    empty_21_fu_249_p1 <= add_ln31_1_fu_243_p2(3 - 1 downto 0);
    empty_fu_202_p1 <= ap_sig_allocacmp_i_1(3 - 1 downto 0);
    grp_fu_463_p0 <= grp_fu_463_p00(8 - 1 downto 0);
    grp_fu_463_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_V_q3),16));
    grp_fu_463_p1 <= grp_fu_463_p10(8 - 1 downto 0);
    grp_fu_463_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_V_q3),16));
    grp_fu_463_p2 <= grp_fu_463_p20(16 - 1 downto 0);
    grp_fu_463_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1494_1_reg_566_pp0_iter2_reg),17));
    grp_fu_472_p0 <= grp_fu_472_p00(8 - 1 downto 0);
    grp_fu_472_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_V_q0),16));
    grp_fu_472_p1 <= grp_fu_472_p10(8 - 1 downto 0);
    grp_fu_472_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_V_q0),16));
    grp_fu_472_p2 <= grp_fu_472_p20(16 - 1 downto 0);
    grp_fu_472_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1494_2_reg_571_pp0_iter2_reg),17));
    icmp_ln31_fu_214_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten26_load = ap_const_lv8_80) else "0";
    icmp_ln32_fu_229_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv5_10) else "0";
    j_2_cast3_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_fu_235_p3),7));
    j_2_cast4_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_fu_235_p3),64));
    mul_ln1494_1_fu_420_p0 <= mul_ln1494_1_fu_420_p00(8 - 1 downto 0);
    mul_ln1494_1_fu_420_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_V_q2),16));
    mul_ln1494_1_fu_420_p1 <= mul_ln1494_1_fu_420_p10(8 - 1 downto 0);
    mul_ln1494_1_fu_420_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_V_q2),16));
    mul_ln1494_2_fu_430_p0 <= mul_ln1494_2_fu_430_p00(8 - 1 downto 0);
    mul_ln1494_2_fu_430_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_V_q1),16));
    mul_ln1494_2_fu_430_p1 <= mul_ln1494_2_fu_430_p10(8 - 1 downto 0);
    mul_ln1494_2_fu_430_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_V_q1),16));
    or_ln31_1_fu_305_p2 <= (select_ln31_2_fu_281_p3 or ap_const_lv5_2);
    or_ln31_2_fu_316_p2 <= (select_ln31_2_fu_281_p3 or ap_const_lv5_3);
    or_ln31_fu_294_p2 <= (select_ln31_2_fu_281_p3 or ap_const_lv5_1);
    p_mid1_fu_253_p3 <= (empty_21_fu_249_p1 & ap_const_lv2_0);
    p_mid3_fu_273_p3 <= (trunc_ln31_fu_269_p1 & ap_const_lv4_0);
    select_ln31_1_fu_261_p3 <= 
        add_ln31_1_fu_243_p2 when (icmp_ln32_fu_229_p2(0) = '1') else 
        ap_sig_allocacmp_i_1;
    select_ln31_2_fu_281_p3 <= 
        p_mid1_fu_253_p3 when (icmp_ln32_fu_229_p2(0) = '1') else 
        tmp_3_fu_206_p3;
    select_ln31_fu_235_p3 <= 
        ap_const_lv5_0 when (icmp_ln32_fu_229_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
        sext_ln186_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln35_fu_336_p2),6));

    tmp_3_fu_206_p3 <= (empty_fu_202_p1 & ap_const_lv2_0);
    trunc_ln31_fu_269_p1 <= select_ln31_1_fu_261_p3(3 - 1 downto 0);
    xor_ln35_fu_336_p2 <= (select_ln31_fu_235_p3 xor ap_const_lv5_10);
    zext_ln186_1_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln35_fu_336_p2),64));
    zext_ln186_3_cast_fu_347_p3 <= (ap_const_lv1_1 & select_ln31_fu_235_p3);
    zext_ln186_3_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln186_3_cast_fu_347_p3),64));
    zext_ln186_5_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln186_fu_360_p1),64));
    zext_ln31_2_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_fu_294_p2),64));
    zext_ln31_4_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_1_fu_305_p2),64));
    zext_ln31_6_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_2_fu_316_p2),64));
    zext_ln31_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_2_fu_281_p3),64));
    zext_ln37_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln37_reg_546_pp0_iter3_reg),64));
    zext_ln840_1_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_463_p3),18));
    zext_ln840_2_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_472_p3),18));
end behav;
