// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mult_hw_mult_hw_Pipeline_VITIS_LOOP_31_5_VITIS_LOOP_32_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_V_address0,
        A_V_ce0,
        A_V_q0,
        A_V_address1,
        A_V_ce1,
        A_V_q1,
        A_V_address2,
        A_V_ce2,
        A_V_q2,
        A_V_address3,
        A_V_ce3,
        A_V_q3,
        B_V_address0,
        B_V_ce0,
        B_V_q0,
        B_V_address1,
        B_V_ce1,
        B_V_q1,
        B_V_address2,
        B_V_ce2,
        B_V_q2,
        B_V_address3,
        B_V_ce3,
        B_V_q3,
        C_V_address0,
        C_V_ce0,
        C_V_we0,
        C_V_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] A_V_address0;
output   A_V_ce0;
input  [7:0] A_V_q0;
output  [4:0] A_V_address1;
output   A_V_ce1;
input  [7:0] A_V_q1;
output  [4:0] A_V_address2;
output   A_V_ce2;
input  [7:0] A_V_q2;
output  [4:0] A_V_address3;
output   A_V_ce3;
input  [7:0] A_V_q3;
output  [5:0] B_V_address0;
output   B_V_ce0;
input  [7:0] B_V_q0;
output  [5:0] B_V_address1;
output   B_V_ce1;
input  [7:0] B_V_q1;
output  [5:0] B_V_address2;
output   B_V_ce2;
input  [7:0] B_V_q2;
output  [5:0] B_V_address3;
output   B_V_ce3;
input  [7:0] B_V_q3;
output  [6:0] C_V_address0;
output   C_V_ce0;
output   C_V_we0;
output  [17:0] C_V_d0;

reg ap_idle;
reg A_V_ce0;
reg A_V_ce1;
reg A_V_ce2;
reg A_V_ce3;
reg B_V_ce0;
reg B_V_ce1;
reg B_V_ce2;
reg B_V_ce3;
reg C_V_ce0;
reg C_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln31_fu_214_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [6:0] add_ln37_fu_369_p2;
reg   [6:0] add_ln37_reg_546;
reg   [6:0] add_ln37_reg_546_pp0_iter1_reg;
reg   [6:0] add_ln37_reg_546_pp0_iter2_reg;
reg   [6:0] add_ln37_reg_546_pp0_iter3_reg;
wire   [15:0] mul_ln1494_1_fu_420_p2;
reg   [15:0] mul_ln1494_1_reg_566;
reg   [15:0] mul_ln1494_1_reg_566_pp0_iter2_reg;
wire   [15:0] mul_ln1494_2_fu_430_p2;
reg   [15:0] mul_ln1494_2_reg_571;
reg   [15:0] mul_ln1494_2_reg_571_pp0_iter2_reg;
wire   [63:0] zext_ln31_fu_289_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln31_2_fu_300_p1;
wire   [63:0] zext_ln31_4_fu_311_p1;
wire   [63:0] zext_ln31_6_fu_322_p1;
wire   [63:0] j_2_cast4_fu_327_p1;
wire   [63:0] zext_ln186_1_fu_342_p1;
wire   [63:0] zext_ln186_3_fu_355_p1;
wire   [63:0] zext_ln186_5_fu_364_p1;
wire   [63:0] zext_ln37_fu_459_p1;
reg   [4:0] j_fu_58;
wire   [4:0] add_ln32_fu_375_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_62;
wire   [3:0] select_ln31_1_fu_261_p3;
reg   [3:0] ap_sig_allocacmp_i_1;
reg   [7:0] indvar_flatten26_fu_66;
wire   [7:0] add_ln31_fu_220_p2;
reg   [7:0] ap_sig_allocacmp_indvar_flatten26_load;
wire   [2:0] empty_fu_202_p1;
wire   [0:0] icmp_ln32_fu_229_p2;
wire   [3:0] add_ln31_1_fu_243_p2;
wire   [2:0] empty_21_fu_249_p1;
wire   [2:0] trunc_ln31_fu_269_p1;
wire   [4:0] p_mid1_fu_253_p3;
wire   [4:0] tmp_3_fu_206_p3;
wire   [4:0] select_ln31_2_fu_281_p3;
wire   [4:0] or_ln31_fu_294_p2;
wire   [4:0] or_ln31_1_fu_305_p2;
wire   [4:0] or_ln31_2_fu_316_p2;
wire   [4:0] select_ln31_fu_235_p3;
wire  signed [4:0] xor_ln35_fu_336_p2;
wire   [5:0] zext_ln186_3_cast_fu_347_p3;
wire  signed [5:0] sext_ln186_fu_360_p1;
wire   [6:0] j_2_cast3_fu_332_p1;
wire   [6:0] p_mid3_fu_273_p3;
wire   [7:0] mul_ln1494_1_fu_420_p0;
wire   [7:0] mul_ln1494_1_fu_420_p1;
wire   [7:0] mul_ln1494_2_fu_430_p0;
wire   [7:0] mul_ln1494_2_fu_430_p1;
wire   [16:0] grp_fu_463_p3;
wire   [16:0] grp_fu_472_p3;
wire   [17:0] zext_ln840_2_fu_449_p1;
wire   [17:0] zext_ln840_1_fu_446_p1;
wire   [7:0] grp_fu_463_p0;
wire   [7:0] grp_fu_463_p1;
wire   [15:0] grp_fu_463_p2;
wire   [7:0] grp_fu_472_p0;
wire   [7:0] grp_fu_472_p1;
wire   [15:0] grp_fu_472_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [15:0] grp_fu_463_p00;
wire   [15:0] grp_fu_463_p10;
wire   [16:0] grp_fu_463_p20;
wire   [15:0] grp_fu_472_p00;
wire   [15:0] grp_fu_472_p10;
wire   [16:0] grp_fu_472_p20;
wire   [15:0] mul_ln1494_1_fu_420_p00;
wire   [15:0] mul_ln1494_1_fu_420_p10;
wire   [15:0] mul_ln1494_2_fu_430_p00;
wire   [15:0] mul_ln1494_2_fu_430_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

mult_hw_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U9(
    .din0(mul_ln1494_1_fu_420_p0),
    .din1(mul_ln1494_1_fu_420_p1),
    .dout(mul_ln1494_1_fu_420_p2)
);

mult_hw_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U10(
    .din0(mul_ln1494_2_fu_430_p0),
    .din1(mul_ln1494_2_fu_430_p1),
    .dout(mul_ln1494_2_fu_430_p2)
);

mult_hw_mac_muladd_8ns_8ns_16ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8ns_8ns_16ns_17_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_463_p0),
    .din1(grp_fu_463_p1),
    .din2(grp_fu_463_p2),
    .ce(1'b1),
    .dout(grp_fu_463_p3)
);

mult_hw_mac_muladd_8ns_8ns_16ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8ns_8ns_16ns_17_4_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_472_p0),
    .din1(grp_fu_472_p1),
    .din2(grp_fu_472_p2),
    .ce(1'b1),
    .dout(grp_fu_472_p3)
);

mult_hw_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln31_fu_214_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_62 <= select_ln31_1_fu_261_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_62 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln31_fu_214_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten26_fu_66 <= add_ln31_fu_220_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten26_fu_66 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln31_fu_214_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_58 <= add_ln32_fu_375_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_58 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_214_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln37_reg_546 <= add_ln37_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln37_reg_546_pp0_iter1_reg <= add_ln37_reg_546;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        mul_ln1494_1_reg_566 <= mul_ln1494_1_fu_420_p2;
        mul_ln1494_2_reg_571 <= mul_ln1494_2_fu_430_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln37_reg_546_pp0_iter2_reg <= add_ln37_reg_546_pp0_iter1_reg;
        add_ln37_reg_546_pp0_iter3_reg <= add_ln37_reg_546_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        mul_ln1494_1_reg_566_pp0_iter2_reg <= mul_ln1494_1_reg_566;
        mul_ln1494_2_reg_571_pp0_iter2_reg <= mul_ln1494_2_reg_571;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_V_ce0 = 1'b1;
    end else begin
        A_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_V_ce1 = 1'b1;
    end else begin
        A_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_V_ce2 = 1'b1;
    end else begin
        A_V_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_V_ce3 = 1'b1;
    end else begin
        A_V_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_V_ce0 = 1'b1;
    end else begin
        B_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_V_ce1 = 1'b1;
    end else begin
        B_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_V_ce2 = 1'b1;
    end else begin
        B_V_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_V_ce3 = 1'b1;
    end else begin
        B_V_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        C_V_ce0 = 1'b1;
    end else begin
        C_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        C_V_we0 = 1'b1;
    end else begin
        C_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_fu_214_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten26_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten26_load = indvar_flatten26_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 5'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_58;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_V_address0 = zext_ln31_6_fu_322_p1;

assign A_V_address1 = zext_ln31_4_fu_311_p1;

assign A_V_address2 = zext_ln31_2_fu_300_p1;

assign A_V_address3 = zext_ln31_fu_289_p1;

assign B_V_address0 = zext_ln186_5_fu_364_p1;

assign B_V_address1 = zext_ln186_3_fu_355_p1;

assign B_V_address2 = zext_ln186_1_fu_342_p1;

assign B_V_address3 = j_2_cast4_fu_327_p1;

assign C_V_address0 = zext_ln37_fu_459_p1;

assign C_V_d0 = (zext_ln840_2_fu_449_p1 + zext_ln840_1_fu_446_p1);

assign add_ln31_1_fu_243_p2 = (ap_sig_allocacmp_i_1 + 4'd1);

assign add_ln31_fu_220_p2 = (ap_sig_allocacmp_indvar_flatten26_load + 8'd1);

assign add_ln32_fu_375_p2 = (select_ln31_fu_235_p3 + 5'd1);

assign add_ln37_fu_369_p2 = (j_2_cast3_fu_332_p1 + p_mid3_fu_273_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_21_fu_249_p1 = add_ln31_1_fu_243_p2[2:0];

assign empty_fu_202_p1 = ap_sig_allocacmp_i_1[2:0];

assign grp_fu_463_p0 = grp_fu_463_p00;

assign grp_fu_463_p00 = B_V_q3;

assign grp_fu_463_p1 = grp_fu_463_p10;

assign grp_fu_463_p10 = A_V_q3;

assign grp_fu_463_p2 = grp_fu_463_p20;

assign grp_fu_463_p20 = mul_ln1494_1_reg_566_pp0_iter2_reg;

assign grp_fu_472_p0 = grp_fu_472_p00;

assign grp_fu_472_p00 = B_V_q0;

assign grp_fu_472_p1 = grp_fu_472_p10;

assign grp_fu_472_p10 = A_V_q0;

assign grp_fu_472_p2 = grp_fu_472_p20;

assign grp_fu_472_p20 = mul_ln1494_2_reg_571_pp0_iter2_reg;

assign icmp_ln31_fu_214_p2 = ((ap_sig_allocacmp_indvar_flatten26_load == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_229_p2 = ((ap_sig_allocacmp_j_load == 5'd16) ? 1'b1 : 1'b0);

assign j_2_cast3_fu_332_p1 = select_ln31_fu_235_p3;

assign j_2_cast4_fu_327_p1 = select_ln31_fu_235_p3;

assign mul_ln1494_1_fu_420_p0 = mul_ln1494_1_fu_420_p00;

assign mul_ln1494_1_fu_420_p00 = B_V_q2;

assign mul_ln1494_1_fu_420_p1 = mul_ln1494_1_fu_420_p10;

assign mul_ln1494_1_fu_420_p10 = A_V_q2;

assign mul_ln1494_2_fu_430_p0 = mul_ln1494_2_fu_430_p00;

assign mul_ln1494_2_fu_430_p00 = B_V_q1;

assign mul_ln1494_2_fu_430_p1 = mul_ln1494_2_fu_430_p10;

assign mul_ln1494_2_fu_430_p10 = A_V_q1;

assign or_ln31_1_fu_305_p2 = (select_ln31_2_fu_281_p3 | 5'd2);

assign or_ln31_2_fu_316_p2 = (select_ln31_2_fu_281_p3 | 5'd3);

assign or_ln31_fu_294_p2 = (select_ln31_2_fu_281_p3 | 5'd1);

assign p_mid1_fu_253_p3 = {{empty_21_fu_249_p1}, {2'd0}};

assign p_mid3_fu_273_p3 = {{trunc_ln31_fu_269_p1}, {4'd0}};

assign select_ln31_1_fu_261_p3 = ((icmp_ln32_fu_229_p2[0:0] == 1'b1) ? add_ln31_1_fu_243_p2 : ap_sig_allocacmp_i_1);

assign select_ln31_2_fu_281_p3 = ((icmp_ln32_fu_229_p2[0:0] == 1'b1) ? p_mid1_fu_253_p3 : tmp_3_fu_206_p3);

assign select_ln31_fu_235_p3 = ((icmp_ln32_fu_229_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_j_load);

assign sext_ln186_fu_360_p1 = xor_ln35_fu_336_p2;

assign tmp_3_fu_206_p3 = {{empty_fu_202_p1}, {2'd0}};

assign trunc_ln31_fu_269_p1 = select_ln31_1_fu_261_p3[2:0];

assign xor_ln35_fu_336_p2 = (select_ln31_fu_235_p3 ^ 5'd16);

assign zext_ln186_1_fu_342_p1 = $unsigned(xor_ln35_fu_336_p2);

assign zext_ln186_3_cast_fu_347_p3 = {{1'd1}, {select_ln31_fu_235_p3}};

assign zext_ln186_3_fu_355_p1 = zext_ln186_3_cast_fu_347_p3;

assign zext_ln186_5_fu_364_p1 = $unsigned(sext_ln186_fu_360_p1);

assign zext_ln31_2_fu_300_p1 = or_ln31_fu_294_p2;

assign zext_ln31_4_fu_311_p1 = or_ln31_1_fu_305_p2;

assign zext_ln31_6_fu_322_p1 = or_ln31_2_fu_316_p2;

assign zext_ln31_fu_289_p1 = select_ln31_2_fu_281_p3;

assign zext_ln37_fu_459_p1 = add_ln37_reg_546_pp0_iter3_reg;

assign zext_ln840_1_fu_446_p1 = grp_fu_463_p3;

assign zext_ln840_2_fu_449_p1 = grp_fu_472_p3;

endmodule //mult_hw_mult_hw_Pipeline_VITIS_LOOP_31_5_VITIS_LOOP_32_6
